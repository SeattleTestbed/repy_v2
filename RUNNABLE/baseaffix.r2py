"""
baseaffix.r2py

Defines the interface that every Affix component has to extend 
and implement.
"""

# Needed for AffixError
affix_exceptions = dy_import_module("affix_exceptions.r2py")

# Import all the wrapper classes.
affix_wrapper_lib = dy_import_module("affix_wrapper_lib.r2py")



class BaseAffix:

  def __init__(self, next_affix, optional_args=None):
    """
    <Purpose>
      Initialize this particular Affix component.

    <Arguments>
      next_affix - The Affix component that resides beneath
          the current component in the stack.

      optional_args - Any optional argument that this particular 
          Affix component takes.

    <Side Effects>
      None

    <Exceptions>
      None

    <Return>
      None
    """

    # Global variables that are used to keep the state of this affix.
    self.affix_context = {'optional_args' : optional_args, 
        'next_affix' : next_affix}



  
  # ===========================================================================
  # Public methods that the child classes must override.
  # ===========================================================================


  def copy(self):
    """
    Creates and returns a copy of this instance. Also copies the 
    Affix component below us. Typical implementation:

    reference_to_copy_of_next_affix = self.affix_context['next_affix'].copy()
    # To reproduce myself, create a new object that is configured 
    # like I was at instantiation
    reproduced_self = MyAffix(reference_to_copy_of_next_affix, 
      self.affix_context['optional_args'])
    # If you store additional state information besides affix_context, 
    # remember to give it to my reproduced self too!
    return reproduced_self
    """
    raise affix_exceptions.AffixError(repr(self) + " does not implement a copy() method!")


  def get_advertisement_string(self):
    """
    Returns the string used for advertisement of this Affix component, 
    and all components below it. For example:

    return '(MyAffix,' + str(self._some_shared_state) + ')' + self.peek().get_advertisement_string()

    If the subclass affix is not meant to be public, then simply return an empty
    string.

    """
    raise affix_exceptions.AffixError(repr(self) + " does not implement a get_advertisement_string() method!")




  # =========================================================================
  # Public methods to view or modify the AFFIX stack.
  # =========================================================================
 
  def peek(self):
    """
    <Purpose>
      Peek into the affix stack and return the next layer
      of affix. If the affix stack is empty, then we will 
      return the RepyNetworkApi object, which is used to
      call the original repy network calls.

    <Arguments>
      None

    <Side Effects>
      None

    <Exceptions>
      None.

    <Return>
      Next layer of affix or an object that encompasses the original
      repy network api.
    """
    
    return self.affix_context['next_affix']




  def pop(self):
    """
    <Purpose>
      Remove and return the Affix component below us from the Affix stack.
      If stack is empty, raise an AffixStackError.

    <Arguments>
      None

    <Side Effects>
      Stack gets modified.

    <Exception>
      AffixStackError - raised if the affix stack is empty.

    <Return>
      The Affix component that was below us on the stack before the pop().
    """

    # We make a reference to the next AFFIX that lies in the stack
    # and point our next_affix pointer to the next_affix of the 
    # next_affix. Example: 
    # Originally : A->B->C->bottom_of_stack
    # Finally: A->C->bottom_of_stack,  B->None
    next_affix = self.peek()

    # This fails if next_affix is the RepyNetworkAPIWrapper at 
    # the bottom of the stack already.
    next_next_affix = next_affix.peek()

    # We point the next AFFIX for the return object to null so
    # the popped AFFIX object no longer has any reference to any
    # of the AFFIXs in the stack.
    self.affix_context['next_affix'] = next_next_affix
    next_affix.affix_context['next_affix'] = None

    return next_affix
    



  def push(self, new_affix_object):
    """
    <Purpose>
      Add the new_affix_object underneath the current AFFIX object.

    <Arguments>
      new_affix_object - the affix that needs to be added to the stack.

    <Side Effects>
      The stack of the current top affix gets modified

    <Exceptions>
      AffixStackError - raised if unable to add affix_object to stack.
    
    <Return>
      None
    """
    
    # We point the new_affix_object to our next_affix and then point
    # ourself to the new_affix_object.
    next_affix_object = self.peek()

    new_affix_object.affix_context['next_affix'] = next_affix_object
    self.affix_context['next_affix'] = new_affix_object




  # ============================================================================
  # Public methods that directly interface with the application. The methods may
  # be overwritten by the affix objects that inherit the base affix. If the methods
  # are not overwritten, then these methods will be used in the affix that inherits
  # them.
  # ===========================================================================

  def sendmessage(self, destip, destport, message, localip, localport):
    return self.peek().sendmessage(destip, destport, message, localip, localport)



  def listenformessage(self, localip, localport):
    next_layer_socket = self.peek().listenformessage(localip, localport)
    return affix_wrapper_lib.AffixUDPServerSocket(next_layer_socket, self)



  def openconnection(self, destip, destport, localip, localport, timeout):
    # We make a copy of ourselves before we do anything as we may have multiple
    # openconnection calls that return multiple real sockets.
    #this_affix_copy = self.copy()
    next_sockobj = self.peek().openconnection(destip, destport, localip, localport, timeout)
    
    return affix_wrapper_lib.AffixSocket(next_sockobj, self)



  def listenforconnection(self, localip, localport):
    # TODO: Not sure if we have to make a copy of self before retrieving
    # the next layer.
    next_layer_socket = self.peek().listenforconnection(localip, localport)
    return affix_wrapper_lib.AffixTCPServerSocket(next_layer_socket, self)



  def socket_close(self, socket):
    return self.peek().socket_close(socket)



  def socket_send(self, socket, msg):
    return self.peek().socket_send(socket, msg)



  def socket_recv(self, socket, bytes):
    return self.peek().socket_recv(socket, bytes)



  def tcpserversocket_getconnection(self, tcpserversocket):
    # We make a copy of ourselves before doing a getconnection
    # as this function may be invoked multiple times and each
    # individual socket may each modify the affix stack 
    # below it differently. 
    this_affix_copy = self.copy()
    (remote_ip, remote_port, repy_socket) = this_affix_copy.peek().tcpserversocket_getconnection(tcpserversocket)

    return (remote_ip, remote_port, affix_wrapper_lib.AffixSocket(repy_socket, self))



  def tcpserversocket_close(self, tcpserversocket):
    return self.peek().tcpserversocket_close(tcpserversocket)



  def udpserversocket_getmessage(self, udpserversocket):
    return self.copy().peek().udpserversocket_getmessage(udpserversocket)



  def udpserversocket_close(self, udpserversocket):
    return self.peek().udpserversocket_close(udpserversocket)


  def getmyip(self):
    return self.peek().getmyip()


  def gethostbyname(self, name):
    return self.peek().gethostbyname(name)


  def __str__(self):
    return '(%s)' % repr(self).replace(' instance at', '') + str(self.peek())
